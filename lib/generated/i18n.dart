
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.

class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
      const GeneratedLocalizationsDelegate();

  static S of(BuildContext context) =>
      Localizations.of<S>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get app_title => "CiE";
  String get courses_filter_department => "Department";
  String get courses_list_department_short => "DP";
  String get courses_list_time => "Time";
  String get courses_search_hint => "Search by Course Name";
  String get courses_title => "Courses";
  String get favorites_button_register => "Register Favorited Courses";
  String get favorites_title => "Favorites";
  String get map_campus_karlstrasse => "Karlstrasse Campus";
  String get map_campus_lothstrasse => "Lothstrasse Campus";
  String get map_campus_pasing => "Pasing Campus";
  String get map_openMapDescription => "Click on the map to get directions.";
  String get map_title => "Map";
  String get settings_button_logout => "Log out";
  String get settings_cieCertificate => "Courses in English Certificate";
  String get settings_contactInternationalOffice => "Contact International Office";
  String get settings_department_label => "Department:";
  String get settings_ieCertificate => "International Engineering Certificate";
  String get settings_loggedInAs_label => "Logged in as";
  String get settings_status_exchange => "Exchange student";
  String get settings_status_label => "Status:";
  String get settings_status_local => "Local student";
  String get settings_takenCourses_label => "Taken Courses";
  String get settings_title => "Settings";
  String get start_button_start => "Start";
  String get start_headline => "Courses in English";
  String get tabs_courses => "Courses";
  String get tabs_favorites => "Favorites";
  String get tabs_map => "Map";
  String get tabs_settings => "Settings";
  String get tabs_timetable => "Timetable";
  String get timetable_title => "Timetable";
  String get welcome_button_login => "LOGIN";
  String get welcome_button_loginAsGuest => "Login as Guest";
  String get welcome_email_hint => "E-Mail";
  String get welcome_headline => "Courses in English";
  String get welcome_password_hint => "Password";
  String get welcome_text_forgetPassword => "Forgot your password?";
  String get welcome_text_noAccount => "Don't have an account?";
}

class de extends S {
  const de();

   @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get welcome_button_login => "ANMELDEN";
  @override
  String get welcome_password_hint => "Passwort";
  @override
  String get timetable_title => "Stundenplan";
  @override
  String get start_headline => "Kurse in Englisch";
  @override
  String get courses_title => "Kurse";
  @override
  String get settings_title => "Einstellungen";
  @override
  String get settings_ieCertificate => "International Engineering Zertifikat";
  @override
  String get tabs_timetable => "Stundenplan";
  @override
  String get courses_list_department_short => "FK";
  @override
  String get settings_status_label => "Status:";
  @override
  String get map_campus_lothstrasse => "Campus Lothstraße";
  @override
  String get map_campus_pasing => "Campus Pasing";
  @override
  String get settings_button_logout => "Abmelden";
  @override
  String get settings_cieCertificate => "Courses in English Zertifikat";
  @override
  String get settings_takenCourses_label => "Belegte Kurse";
  @override
  String get tabs_map => "Karte";
  @override
  String get courses_search_hint => "Suche nach Kursnamen";
  @override
  String get tabs_courses => "Kurse";
  @override
  String get settings_contactInternationalOffice => "Kontaktiere das International Office";
  @override
  String get map_campus_karlstrasse => "Campus Karlstraße";
  @override
  String get tabs_settings => "Einstellungen";
  @override
  String get app_title => "CiE";
  @override
  String get settings_status_local => "Lokaler Student";
  @override
  String get settings_status_exchange => "Austauschstudent";
  @override
  String get settings_loggedInAs_label => "Angemeldet als";
  @override
  String get map_title => "Karte";
  @override
  String get map_openMapDescription => "Klicke auf die Karte um die Route angezeigt zu bekommen.";
  @override
  String get tabs_favorites => "Favoriten";
  @override
  String get courses_filter_department => "Fakultät";
  @override
  String get settings_department_label => "Fakultät:";
  @override
  String get welcome_email_hint => "E-Mail";
  @override
  String get start_button_start => "Start";
  @override
  String get courses_list_time => "Uhrzeit";
  @override
  String get favorites_button_register => "Registere favorisierte Kurse";
  @override
  String get welcome_headline => "Kurse in Englisch";
  @override
  String get welcome_text_noAccount => "Noch keinen Account?";
  @override
  String get favorites_title => "Favoriten";
  @override
  String get welcome_button_loginAsGuest => "Als Gast anmelden";
}

class en extends S {
  const en();
}


class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[

      const Locale("de", ""),
      const Locale("en", ""),

    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      final Locale languageLocale = new Locale(locale.languageCode, "");
      if (supported.contains(locale))
        return locale;
      else if (supported.contains(languageLocale))
        return languageLocale;
      else {
        final Locale fallbackLocale = fallback ?? supported.first;
        return fallbackLocale;
      }
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    final String lang = getLang(locale);
    switch (lang) {

      case "de":
        return new SynchronousFuture<WidgetsLocalizations>(const de());
      case "en":
        return new SynchronousFuture<WidgetsLocalizations>(const en());

      default:
        return new SynchronousFuture<WidgetsLocalizations>(const S());
    }
  }

  @override
  bool isSupported(Locale locale) => supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
